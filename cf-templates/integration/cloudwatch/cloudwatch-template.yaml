AWSTemplateFormatVersion: '2010-09-09'
Description: 'Well-Architected準拠 CloudWatch テンプレート - 包括的な監視とログ集約'

Metadata:
  WellArchitectedCompliance:
    OperationalExcellence: [OPS04-BP01, OPS04-BP02, OPS07-BP01, OPS08-BP01]
    Security: [SEC04-BP01, SEC04-BP02, SEC10-BP01]
    Reliability: [REL06-BP01, REL06-BP02, REL11-BP01, REL11-BP02]
    PerformanceEfficiency: [PERF04-BP02, PERF04-BP03]
    CostOptimization: [COST02-BP05, COST03-BP01, COST03-BP02]
    Sustainability: [SUS02-BP01, SUS06-BP01]
  
  ConfigurationPatterns:
    Basic:
      Description: "基本的なCloudWatch監視設定"
      Features: ["基本メトリクス", "ログ保持", "基本アラーム"]
    Advanced:
      Description: "高度なCloudWatch監視設定"
      Features: ["カスタムメトリクス", "複合アラーム", "ダッシュボード", "ログインサイト"]
    Enterprise:
      Description: "エンタープライズCloudWatch監視設定"
      Features: ["高度なダッシュボード", "異常検知", "クロスアカウント監視", "コンテナインサイト"]

Parameters:
  ProjectName:
    Type: String
    Description: プロジェクト名
    Default: my-project
  
  Environment:
    Type: String
    Description: 環境名
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  ConfigurationPattern:
    Type: String
    Description: 設定パターン
    Default: Basic
    AllowedValues: [Basic, Advanced, Enterprise]
  
  LogRetentionDays:
    Type: Number
    Description: ログ保持期間（日）
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  
  EnableDetailedMonitoring:
    Type: String
    Description: 詳細監視を有効にする
    Default: "false"
    AllowedValues: ["true", "false"]
  
  EnableContainerInsights:
    Type: String
    Description: Container Insights を有効にする
    Default: "false"
    AllowedValues: ["true", "false"]
  
  EnableAnomalyDetection:
    Type: String
    Description: 異常検知を有効にする
    Default: "false"
    AllowedValues: ["true", "false"]
  
  NotificationEmail:
    Type: String
    Description: アラーム通知用メールアドレス
    Default: ""
  
  SlackWebhookUrl:
    Type: String
    Description: Slack通知用WebhookURL
    Default: ""
    NoEcho: true
  
  DashboardTimeRange:
    Type: String
    Description: ダッシュボードのデフォルト時間範囲
    Default: "-PT3H"
    AllowedValues: ["-PT1H", "-PT3H", "-PT6H", "-PT12H", "-P1D", "-P3D", "-P1W"]

Mappings:
  ConfigurationSettings:
    Basic:
      MetricFilterCount: 5
      AlarmCount: 10
      DashboardWidgets: 6
      LogInsightsQueries: 3
    Advanced:
      MetricFilterCount: 15
      AlarmCount: 25
      DashboardWidgets: 12
      LogInsightsQueries: 8
    Enterprise:
      MetricFilterCount: 30
      AlarmCount: 50
      DashboardWidgets: 20
      LogInsightsQueries: 15
  
  AlarmThresholds:
    Basic:
      CPUUtilization: 80
      MemoryUtilization: 85
      DiskUtilization: 90
      ErrorRate: 5
    Advanced:
      CPUUtilization: 70
      MemoryUtilization: 80
      DiskUtilization: 85
      ErrorRate: 3
    Enterprise:
      CPUUtilization: 60
      MemoryUtilization: 75
      DiskUtilization: 80
      ErrorRate: 1

Conditions:
  CreateAdvancedResources: !Or
    - !Equals [!Ref ConfigurationPattern, Advanced]
    - !Equals [!Ref ConfigurationPattern, Enterprise]
  
  CreateEnterpriseResources: !Equals [!Ref ConfigurationPattern, Enterprise]
  
  EnableDetailedMonitoringCondition: !Equals [!Ref EnableDetailedMonitoring, "true"]
  
  EnableContainerInsightsCondition: !Equals [!Ref EnableContainerInsights, "true"]
  
  EnableAnomalyDetectionCondition: !Equals [!Ref EnableAnomalyDetection, "true"]
  
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, ""]]
  
  HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookUrl, ""]]

Resources:
  # SNS Topic for Notifications
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-alerts'
      DisplayName: !Sub '${ProjectName} ${Environment} Alerts'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alerts'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Email Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Lambda Function for Slack Notifications
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-slack-notification'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SlackNotificationRole.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
      Code:
        ZipFile: |
          import json
          import urllib3
          import os
          
          def lambda_handler(event, context):
              webhook_url = os.environ['SLACK_WEBHOOK_URL']
              
              # Parse SNS message
              message = json.loads(event['Records'][0]['Sns']['Message'])
              
              slack_message = {
                  "text": f"CloudWatch Alert: {message.get('AlarmName', 'Unknown')}",
                  "attachments": [
                      {
                          "color": "danger" if message.get('NewStateValue') == 'ALARM' else "good",
                          "fields": [
                              {
                                  "title": "Alarm Name",
                                  "value": message.get('AlarmName', 'N/A'),
                                  "short": True
                              },
                              {
                                  "title": "State",
                                  "value": message.get('NewStateValue', 'N/A'),
                                  "short": True
                              },
                              {
                                  "title": "Reason",
                                  "value": message.get('NewStateReason', 'N/A'),
                                  "short": False
                              }
                          ]
                      }
                  ]
              }
              
              http = urllib3.PoolManager()
              response = http.request(
                  'POST',
                  webhook_url,
                  body=json.dumps(slack_message),
                  headers={'Content-Type': 'application/json'}
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Message sent to Slack')
              }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-slack-notification'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for Slack Notification Lambda
  SlackNotificationRole:
    Type: AWS::IAM::Role
    Condition: HasSlackWebhook
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-slack-notification-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-slack-notification-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Subscription for Slack
  SlackSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Lambda Permission for SNS
  SlackNotificationPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlertTopic

  # CloudWatch Log Groups
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/application/${ProjectName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-application-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  SystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/system/${ProjectName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-system-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Custom Metric Filters
  ErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterPattern: '[timestamp, request_id, level="ERROR", ...]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/${Environment}'
          MetricName: ErrorCount
          MetricValue: '1'
          DefaultValue: 0

  WarningMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterPattern: '[timestamp, request_id, level="WARN", ...]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/${Environment}'
          MetricName: WarningCount
          MetricValue: '1'
          DefaultValue: 0

  ResponseTimeMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: CreateAdvancedResources
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterPattern: '[timestamp, request_id, level, message, response_time]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/${Environment}'
          MetricName: ResponseTime
          MetricValue: '$response_time'
          DefaultValue: 0

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-error-rate'
      AlarmDescription: 'High error rate detected'
      MetricName: ErrorCount
      Namespace: !Sub '${ProjectName}/${Environment}'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: !FindInMap [AlarmThresholds, !Ref ConfigurationPattern, ErrorRate]
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-high-error-rate'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-cpu'
      AlarmDescription: 'High CPU utilization detected'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !FindInMap [AlarmThresholds, !Ref ConfigurationPattern, CPUUtilization]
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-high-cpu'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Composite Alarm
  SystemHealthAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    Condition: CreateAdvancedResources
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-system-health'
      AlarmDescription: 'Overall system health composite alarm'
      AlarmRule: !Sub |
        ALARM("${HighErrorRateAlarm}") OR
        ALARM("${HighCPUAlarm}")
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-system-health'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Anomaly Detector
  ErrorCountAnomalyDetector:
    Type: AWS::CloudWatch::AnomalyDetector
    Condition: EnableAnomalyDetectionCondition
    Properties:
      MetricName: ErrorCount
      Namespace: !Sub '${ProjectName}/${Environment}'
      Stat: Sum
      Dimensions:
        - Name: Environment
          Value: !Ref Environment

  # Anomaly Alarm
  ErrorCountAnomalyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAnomalyDetectionCondition
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-error-anomaly'
      AlarmDescription: 'Error count anomaly detected'
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 2
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              MetricName: ErrorCount
              Namespace: !Sub '${ProjectName}/${Environment}'
            Period: 300
            Stat: Sum
        - Id: ad1
          AnomalyDetector:
            MetricMathAnomalyDetector:
              MetricDataQueries:
                - Id: m1
                  MetricStat:
                    Metric:
                      MetricName: ErrorCount
                      Namespace: !Sub '${ProjectName}/${Environment}'
                    Period: 300
                    Stat: Sum
      ThresholdMetricId: ad1
      AlarmActions:
        - !Ref AlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-error-anomaly'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateAdvancedResources
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${ProjectName}/${Environment}", "ErrorCount" ],
                  [ ".", "WarningCount" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Application Errors and Warnings",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization" ],
                  [ "AWS/ApplicationELB", "TargetResponseTime" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "System Performance",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/application/${ProjectName}-${Environment}'\n| fields @timestamp, level, message\n| filter level = \"ERROR\"\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Errors",
                "view": "table"
              }
            }
          ]
        }

  # Enterprise Dashboard
  EnterpriseDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateEnterpriseResources
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-enterprise'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${ProjectName}/${Environment}", "ErrorCount" ],
                  [ ".", "WarningCount" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Error Metrics"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization" ],
                  [ "AWS/EC2", "MemoryUtilization" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Utilization"
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount" ],
                  [ ".", "TargetResponseTime" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Load Balancer Metrics"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/application/${ProjectName}-${Environment}'\n| fields @timestamp, level, message\n| filter level = \"ERROR\"\n| stats count() by bin(5m)",
                "region": "${AWS::Region}",
                "title": "Error Rate Over Time",
                "view": "line"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/application/${ProjectName}-${Environment}'\n| fields @timestamp, @message\n| filter @message like /response_time/\n| stats avg(response_time) by bin(5m)",
                "region": "${AWS::Region}",
                "title": "Average Response Time",
                "view": "line"
              }
            }
          ]
        }

  # Log Insights Saved Queries
  ErrorAnalysisQuery:
    Type: AWS::Logs::QueryDefinition
    Condition: CreateAdvancedResources
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-error-analysis'
      QueryString: |
        fields @timestamp, level, message, request_id
        | filter level = "ERROR"
        | stats count() by bin(1h)
        | sort @timestamp desc
      LogGroups:
        - !Ref ApplicationLogGroup

  PerformanceAnalysisQuery:
    Type: AWS::Logs::QueryDefinition
    Condition: CreateAdvancedResources
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-performance-analysis'
      QueryString: |
        fields @timestamp, response_time, endpoint
        | filter ispresent(response_time)
        | stats avg(response_time), max(response_time), min(response_time) by endpoint
        | sort avg(response_time) desc
      LogGroups:
        - !Ref ApplicationLogGroup

Outputs:
  AlertTopicArn:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertTopic
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alert-topic-arn'
  
  ApplicationLogGroupName:
    Description: Application Log Group Name
    Value: !Ref ApplicationLogGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-application-log-group'
  
  SystemLogGroupName:
    Description: System Log Group Name
    Value: !Ref SystemLogGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-system-log-group'
  
  MonitoringDashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !If
      - CreateAdvancedResources
      - !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-monitoring'
      - "N/A"
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dashboard-url'
  
  EnterpriseDashboardUrl:
    Description: Enterprise CloudWatch Dashboard URL
    Value: !If
      - CreateEnterpriseResources
      - !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-enterprise'
      - "N/A"
    Export:
      Name: !Sub '${ProjectName}-${Environment}-enterprise-dashboard-url'
  
  SlackNotificationFunctionArn:
    Description: Slack Notification Lambda Function ARN
    Value: !If [HasSlackWebhook, !GetAtt SlackNotificationFunction.Arn, "N/A"]
    Export:
      Name: !Sub '${ProjectName}-${Environment}-slack-notification-function-arn'
  # Cross-Stack Integration Outputs
  SlackNotificationFunctionArn:
    Description: Slack Notification Lambda Function ARN
    Value: !If [HasSlackWebhook, !GetAtt SlackNotificationFunction.Arn, "N/A"]
    Export:
      Name: !Sub '${ProjectName}-${Environment}-slack-notification-function-arn'

  MonitoringDashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !If
      - CreateAdvancedResources
      - !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-monitoring'
      - "N/A"
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dashboard-url'

  EnterpriseDashboardUrl:
    Description: Enterprise CloudWatch Dashboard URL
    Value: !If
      - CreateEnterpriseResources
      - !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-enterprise'
      - "N/A"
    Export:
      Name: !Sub '${ProjectName}-${Environment}-enterprise-dashboard-url'

  ErrorMetricFilterName:
    Description: Error Metric Filter Name
    Value: !Ref ErrorMetricFilter
    Export:
      Name: !Sub '${ProjectName}-${Environment}-error-metric-filter'

  WarningMetricFilterName:
    Description: Warning Metric Filter Name
    Value: !Ref WarningMetricFilter
    Export:
      Name: !Sub '${ProjectName}-${Environment}-warning-metric-filter'
