AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Layer テンプレート - 共有ライブラリとユーティリティ'

Parameters:
  ProjectName:
    Type: String
    Description: プロジェクト名
    Default: my-project
  
  Environment:
    Type: String
    Description: 環境名
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  LayerName:
    Type: String
    Description: レイヤー名
    Default: common-utilities
  
  LayerDescription:
    Type: String
    Description: レイヤーの説明
    Default: Common utilities and dependencies
  
  CompatibleRuntimes:
    Type: CommaDelimitedList
    Description: 互換性のあるランタイム
    Default: 'python3.9,python3.10,python3.11'
  
  LayerS3Bucket:
    Type: String
    Description: レイヤーコードのS3バケット名
    Default: ''
  
  LayerS3Key:
    Type: String
    Description: レイヤーコードのS3キー
    Default: ''
  
  LicenseInfo:
    Type: String
    Description: ライセンス情報
    Default: MIT

Conditions:
  HasLayerS3Location: !And
    - !Not [!Equals [!Ref LayerS3Bucket, '']]
    - !Not [!Equals [!Ref LayerS3Key, '']]

Resources:
  # Lambda Layer
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${ProjectName}-${Environment}-${LayerName}'
      Description: !Ref LayerDescription
      Content: !If
        - HasLayerS3Location
        - S3Bucket: !Ref LayerS3Bucket
          S3Key: !Ref LayerS3Key
        - ZipFile: |
            # Lambda Layer with common utilities
            import json
            import logging
            import os
            from datetime import datetime
            
            def setup_logging(level=None):
                """Setup logging configuration"""
                if level is None:
                    level = os.environ.get('LOG_LEVEL', 'INFO')
                
                logging.basicConfig(
                    level=getattr(logging, level.upper()),
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                )
                return logging.getLogger()
            
            def create_response(status_code, body, headers=None):
                """Create standardized API response"""
                if headers is None:
                    headers = {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    }
                
                return {
                    'statusCode': status_code,
                    'headers': headers,
                    'body': json.dumps(body) if isinstance(body, dict) else body
                }
            
            def get_correlation_id(event):
                """Extract correlation ID from event"""
                headers = event.get('headers', {})
                return headers.get('x-correlation-id', headers.get('X-Correlation-ID', ''))
            
            class MetricsHelper:
                """Helper class for custom metrics"""
                
                def __init__(self, namespace):
                    self.namespace = namespace
                
                def put_metric(self, metric_name, value, unit='Count', dimensions=None):
                    """Put custom metric to CloudWatch"""
                    import boto3
                    
                    cloudwatch = boto3.client('cloudwatch')
                    
                    metric_data = {
                        'MetricName': metric_name,
                        'Value': value,
                        'Unit': unit,
                        'Timestamp': datetime.utcnow()
                    }
                    
                    if dimensions:
                        metric_data['Dimensions'] = [
                            {'Name': k, 'Value': v} for k, v in dimensions.items()
                        ]
                    
                    cloudwatch.put_metric_data(
                        Namespace=self.namespace,
                        MetricData=[metric_data]
                    )
      CompatibleRuntimes: !Ref CompatibleRuntimes
      LicenseInfo: !Ref LicenseInfo

  # Lambda Layer Permission
  LambdaLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      LayerVersionArn: !Ref LambdaLayer
      Action: lambda:GetLayerVersion
      Principal: !Ref 'AWS::AccountId'

Outputs:
  LambdaLayerArn:
    Description: Lambda Layer ARN
    Value: !Ref LambdaLayer
    Export:
      Name: !Sub '${AWS::StackName}-Layer-Arn'
  
  LambdaLayerVersion:
    Description: Lambda Layer Version
    Value: !GetAtt LambdaLayer.Version
    Export:
      Name: !Sub '${AWS::StackName}-Layer-Version'