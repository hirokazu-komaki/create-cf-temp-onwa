AWSTemplateFormatVersion: '2010-09-09'
Description: 'Well-Architected準拠 Lambda Function テンプレート - サーバーレス、監視、セキュリティ重視'

Metadata:
  WellArchitectedCompliance:
    OperationalExcellence: [OPS04-BP01, OPS04-BP02, OPS05-BP01, OPS06-BP01]
    Security: [SEC01-BP01, SEC02-BP02, SEC05-BP01, SEC09-BP01]
    Reliability: [REL02-BP01, REL03-BP01, REL04-BP01, REL11-BP01]
    PerformanceEfficiency: [PERF01-BP01, PERF03-BP01, PERF04-BP01]
    CostOptimization: [COST01-BP01, COST02-BP01, COST07-BP01]
    Sustainability: [SUS01-BP01, SUS02-BP01, SUS06-BP01]
  
  ConfigurationPatterns:
    Basic:
      Description: "基本的なLambda設定 - 軽量処理向け"
      Runtime: python3.9
      MemorySize: 128
      Timeout: 30
      ReservedConcurrency: 10
    Advanced:
      Description: "高度なLambda設定 - 中程度の処理向け"
      Runtime: python3.9
      MemorySize: 512
      Timeout: 300
      ReservedConcurrency: 50
    Enterprise:
      Description: "エンタープライズLambda設定 - 高負荷処理向け"
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 900
      ReservedConcurrency: 100

Parameters:

  # Cross-Stack Import Parameters
  ImportVPCId:
    Type: String
    Description: Import VPC ID from networking-vpc stack
    Default: !ImportValue
      Fn::Sub: '${ProjectName}-${Environment}-VPC-ID'

  ImportPrivateSubnets:
    Type: String
    Description: Import Private Subnets from networking-vpc stack
    Default: !ImportValue
      Fn::Sub: '${ProjectName}-${Environment}-PrivateSubnets'

  ImportExecutionRoleArn:
    Type: String
    Description: Import Execution Role ARN from foundation-iam stack
    Default: !ImportValue
      Fn::Sub: '${ProjectName}-${Environment}-execution-role-arn'

  ImportApplicationKMSKeyArn:
    Type: String
    Description: Import Application KMS Key ARN from foundation-kms stack
    Default: !ImportValue
      Fn::Sub: '${ProjectName}-${Environment}-application-kms-key-arn'

  ProjectName:
    Type: String
    Description: プロジェクト名
    Default: my-project
  
  Environment:
    Type: String
    Description: 環境名
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  ConfigurationPattern:
    Type: String
    Description: 設定パターン
    Default: Basic
    AllowedValues: [Basic, Advanced, Enterprise]
  
  FunctionName:
    Type: String
    Description: Lambda関数名
    Default: my-function
  
  Runtime:
    Type: String
    Description: ランタイム
    Default: python3.9
    AllowedValues: [python3.9, python3.10, python3.11, nodejs18.x, nodejs20.x, java11, java17, dotnet6, go1.x]
  
  Handler:
    Type: String
    Description: ハンドラー
    Default: lambda_function.lambda_handler
  
  CodeS3Bucket:
    Type: String
    Description: Lambda関数コードのS3バケット名
    Default: ''
  
  CodeS3Key:
    Type: String
    Description: Lambda関数コードのS3キー
    Default: ''
  
  EnableVPC:
    Type: String
    Description: VPC内でLambdaを実行する
    Default: 'false'
    AllowedValues: ['true', 'false']
  
  VpcId:
    Type: String
    Description: VPC ID（VPC有効時のみ）
    Default: ''
  
  SubnetIds:
    Type: CommaDelimitedList
    Description: サブネットIDリスト（VPC有効時のみ）
    Default: ''
  
  EnableXRayTracing:
    Type: String
    Description: X-Rayトレーシングを有効にする
    Default: 'true'
    AllowedValues: ['true', 'false']
  
  LogRetentionDays:
    Type: Number
    Description: CloudWatchログの保持日数
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  
  DeadLetterQueueArn:
    Type: String
    Description: デッドレターキューのARN（オプション）
    Default: ''

Conditions:
  HasCodeS3Location: !And
    - !Not [!Equals [!Ref CodeS3Bucket, '']]
    - !Not [!Equals [!Ref CodeS3Key, '']]
  EnableVPCConfig: !Equals [!Ref EnableVPC, 'true']
  HasVpcConfig: !And
    - !Condition EnableVPCConfig
    - !Not [!Equals [!Ref VpcId, '']]
  EnableXRay: !Equals [!Ref EnableXRayTracing, 'true']
  HasDeadLetterQueue: !Not [!Equals [!Ref DeadLetterQueueArn, '']]
  IsProduction: !Equals [!Ref Environment, prod]

Mappings:
  RuntimeSettings:
    python3.9:
      Handler: lambda_function.lambda_handler
      Architecture: x86_64
    python3.10:
      Handler: lambda_function.lambda_handler
      Architecture: x86_64
    python3.11:
      Handler: lambda_function.lambda_handler
      Architecture: x86_64
    nodejs18.x:
      Handler: index.handler
      Architecture: x86_64
    nodejs20.x:
      Handler: index.handler
      Architecture: x86_64
    java11:
      Handler: com.example.Handler
      Architecture: x86_64
    java17:
      Handler: com.example.Handler
      Architecture: x86_64
    dotnet6:
      Handler: Assembly::Namespace.Class::Method
      Architecture: x86_64
    go1.x:
      Handler: main
      Architecture: x86_64
  
  ConfigurationSettings:
    Basic:
      MemorySize: 128
      Timeout: 30
      ReservedConcurrency: 10
      ProvisionedConcurrency: 0
    Advanced:
      MemorySize: 512
      Timeout: 300
      ReservedConcurrency: 50
      ProvisionedConcurrency: 5
    Enterprise:
      MemorySize: 1024
      Timeout: 900
      ReservedConcurrency: 100
      ProvisionedConcurrency: 10

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-${FunctionName}-ExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpcConfig
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref 'AWS::NoValue'
        - !If
          - EnableXRay
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
          - !Ref 'AWS::NoValue'
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-${Environment}-${FunctionName}*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - !If
                - HasDeadLetterQueue
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource: !Ref DeadLetterQueueArn
                - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-${FunctionName}-ExecutionRole'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Security Group (VPC使用時)
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasVpcConfig
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-${FunctionName}-SG'
      GroupDescription: !Sub 'Security Group for ${ProjectName} Lambda function ${FunctionName}'
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-${FunctionName}-SG'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-${FunctionName}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-${FunctionName}'
      Runtime: !Ref Runtime
      Handler: !If
        - HasCodeS3Location
        - !Ref Handler
        - !FindInMap [RuntimeSettings, !Ref Runtime, Handler]
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: !FindInMap [ConfigurationSettings, !Ref ConfigurationPattern, MemorySize]
      Timeout: !FindInMap [ConfigurationSettings, !Ref ConfigurationPattern, Timeout]
      ReservedConcurrencyLimit: !FindInMap [ConfigurationSettings, !Ref ConfigurationPattern, ReservedConcurrency]
      Architectures:
        - !FindInMap [RuntimeSettings, !Ref Runtime, Architecture]
      Code: !If
        - HasCodeS3Location
        - S3Bucket: !Ref CodeS3Bucket
          S3Key: !Ref CodeS3Key
        - ZipFile: |
            import json
            import logging
            
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            def lambda_handler(event, context):
                logger.info(f"Received event: {json.dumps(event)}")
                
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'message': 'Hello from Lambda!',
                        'function_name': context.function_name,
                        'request_id': context.aws_request_id
                    })
                }
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !If [IsProduction, 'INFO', 'DEBUG']
          POWERTOOLS_SERVICE_NAME: !Sub '${ProjectName}-${FunctionName}'
          POWERTOOLS_METRICS_NAMESPACE: !Sub '${ProjectName}/${Environment}'
      VpcConfig: !If
        - HasVpcConfig
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds: !Ref SubnetIds
        - !Ref 'AWS::NoValue'
      TracingConfig:
        Mode: !If [EnableXRay, Active, PassThrough]
      DeadLetterConfig: !If
        - HasDeadLetterQueue
        - TargetArn: !Ref DeadLetterQueueArn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-${FunctionName}'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
    DependsOn: LambdaLogGroup

  # Lambda Version
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: !Sub 'Version for ${ProjectName}-${Environment}-${FunctionName}'

  # Lambda Alias
  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: !Ref Environment
      Description: !Sub 'Alias for ${Environment} environment'

  # Provisioned Concurrency (Advanced/Enterprise パターン)
  ProvisionedConcurrencyConfig:
    Type: AWS::Lambda::ProvisionedConcurrencyConfig
    Condition: !Not [!Equals [!FindInMap [ConfigurationSettings, !Ref ConfigurationPattern, ProvisionedConcurrency], 0]]
    Properties:
      FunctionName: !Ref LambdaFunction
      Qualifier: !Ref LambdaAlias
      ProvisionedConcurrencyLimit: !FindInMap [ConfigurationSettings, !Ref ConfigurationPattern, ProvisionedConcurrency]

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-${FunctionName}-Errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-${FunctionName}-Duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref
        - ConfigurationSettings
        - !Ref ConfigurationPattern
        - Timeout
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-${FunctionName}-Throttles'
      AlarmDescription: 'Lambda function throttle alarm'
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

  # Custom Metrics for Cost Optimization
  CostOptimizationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-${FunctionName}-CostOptimization'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaFunction}" ],
                  [ ".", "Duration", ".", "." ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Throttles", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${LambdaFunction}" ]
                ],
                "period": 300,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Concurrent Executions"
              }
            }
          ]
        }

Outputs:
  LambdaFunctionName:
    Description: Lambda関数名
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-Function-Name'
  
  LambdaFunctionArn:
    Description: Lambda関数ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Function-Arn'
  
  LambdaAliasArn:
    Description: Lambda Alias ARN
    Value: !Ref LambdaAlias
    Export:
      Name: !Sub '${AWS::StackName}-Alias-Arn'
  
  LambdaExecutionRoleArn:
    Description: Lambda実行ロールARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ExecutionRole-Arn'
  
  LambdaLogGroupName:
    Description: CloudWatchロググループ名
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup-Name'
  
  LambdaSecurityGroupId:
    Description: Lambda Security Group ID (VPC使用時のみ)
    Value: !If [HasVpcConfig, !Ref LambdaSecurityGroup, '']
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup-Id'
    Condition: HasVpcConfig